---
import Layout from '../layouts/layout.astro';
---

<Layout>
  <div class="calculator-container">
    <div class="calculator">
      <div id="display" class="display">0</div>
      <div class="buttons">
        <!-- Row 1 -->
        <button id="percent">%</button>
        <button id="ce">CE</button>
        <button id="c">C</button>
        <button id="backspace">⌫</button>
        <!-- Row 2 -->
        <button id="reciprocal">1/x</button>
        <button id="square">x²</button>
        <button id="sqrt">√x</button>
        <button id="divide">÷</button>
        <!-- Row 3 -->
        <button class="number-button">7</button>
        <button class="number-button">8</button>
        <button class="number-button">9</button>
        <button id="multiply">×</button>
        <!-- Row 4 -->
        <button class="number-button">4</button>
        <button class="number-button">5</button>
        <button class="number-button">6</button>
        <button id="subtract">-</button>
        <!-- Row 5 -->
        <button class="number-button">1</button>
        <button class="number-button">2</button>
        <button class="number-button">3</button>
        <button id="add">+</button>
        <!-- Row 6 -->
        <button id="plus-minus">±</button>
        <button class="number-button">0</button>
        <button id="decimal">.</button>
        <button id="equals">=</button>
      </div>
    </div>
    <div class="statistics">
      <h2>Button Press Statistics</h2>
      <table id="stats-table">
        <thead>
          <tr>
            <th>Button</th>
            <th>Press Count</th>
          </tr>
        </thead>
        <tbody id="stats-body">
          <!-- Data will be populated here -->
        </tbody>
      </table>
    </div>
  </div>

  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f0f0f0;
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    nav {
      background-color: #333;
      padding: 10px;
    }

    nav ul {
      list-style-type: none;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: space-around;
    }

    nav ul li {
      display: inline;
    }

    nav ul li a {
      color: white;
      text-decoration: none;
      padding: 10px 20px;
      display: block;
    }

    nav ul li a:hover {
      background-color: #575757;
      border-radius: 4px;
    }

    /* Add this to ensure content takes remaining space */
    div {
      flex: 1;
      padding: 20px;
    }

    .calculator-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      margin-top: 20px;
    }

    .calculator {
      width: 320px;
      background-color: #FFFFFF;
      border: 1px solid #D3D3D3;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .display {
      background-color: #252525;
      color: #FFFFFF;
      font-size: 48px;
      text-align: right;
      padding: 20px;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
    }

    .buttons {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
    }

    .buttons button {
      width: 100%;
      height: 60px;
      font-size: 24px;
      border: none;
      cursor: pointer;
    }

    .buttons button:hover {
      background-color: #F0F0F0;
    }

    .buttons button:active {
      background-color: #D6D6D6;
    }

    #equals {
      background-color: #0078D7;
      color: #FFFFFF;
    }

    #equals:hover {
      background-color: #0062A7;
    }

    .statistics {
      width: 320px;
      background-color: #FFFFFF;
      border: 1px solid #D3D3D3;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .statistics h2 {
      text-align: center;
      margin-bottom: 20px;
    }

    #stats-table {
      width: 100%;
      border-collapse: collapse;
    }

    #stats-table th, #stats-table td {
      border: 1px solid #D3D3D3;
      padding: 8px;
      text-align: center;
    }

    #stats-table th {
      background-color: #F0F0F0;
    }
  </style>

  <script>
    const backendUrl = import.meta.env.PUBLIC_EXPRESS_BACKEND_URL;
    const display = document.getElementById('display') as HTMLElement;
    let currentInput: string = '0';
    let operator: string | null = null;
    let operand1: number | null = null;
    let operand2: number | null = null;
    let result: number | null = null;
    let shouldResetInput: boolean = false;

    // New variables to store last operator and operand
    let lastOperator: string | null = null;
    let lastOperand: number | null = null;

    function updateDisplay() {
      if (display) {
        display.textContent = currentInput;
      }
    }

    function recordButtonPress(button: number) {
      if (!isNaN(button)) {
        fetch(`${backendUrl}/numberPressed/${button}`)
          .then(response => response.text())
          .then(() => {
            fetchStatistics(); // Refresh statistics
          })
          .catch(error => console.error('Error:', error));
      }
    }

    function handleNumber(num: string) {
      if (currentInput === '0' || shouldResetInput) {
        currentInput = num;
        shouldResetInput = false;
      } else {
        currentInput += num;
      }
      updateDisplay();
      recordButtonPress(Number(num));
    }

    function handleOperator(op: string) {
      if (operator !== null && operand1 !== null && !shouldResetInput) {
        operand2 = parseFloat(currentInput);
        performCalculation();
      } else {
        operand1 = parseFloat(currentInput);
      }
      operator = op;
      shouldResetInput = true;
    }

    function handlePercent() {
      if (operator && operand1 !== null) {
        operand2 = (operand1 * parseFloat(currentInput)) / 100;
        currentInput = operand2.toString();
        updateDisplay();
        // Do not automatically perform calculation
      }
    }

    function performCalculation() {
      if (operator && operand1 !== null) {
        if (operand2 === null) {
          // If operand2 is null (equals pressed repeatedly), use lastOperand
          operand2 = lastOperand;
        } else {
          // Store lastOperator and lastOperand for repeated operation
          lastOperator = operator;
          lastOperand = operand2;
        }

        switch (operator) {
          case '+':
            result = operand1 + operand2!;
            break;
          case '-':
            result = operand1 - operand2!;
            break;
          case '×':
            result = operand1 * operand2!;
            break;
          case '÷':
            result = operand1 / operand2!;
            break;
        }
        if (result !== null) {
          currentInput = result.toString();
        }
        operand1 = result;
        operand2 = null;
        operator = null;
        updateDisplay();
        shouldResetInput = true;
      }
    }

    function handleSpecialOperation(op: string) {
      let value = parseFloat(currentInput);
      switch (op) {
        case '1/x':
          value = 1 / value;
          break;
        case 'x²':
          value = value ** 2;
          break;
        case '√x':
          value = Math.sqrt(value);
          break;
        case '±':
          value = -value;
          break;
      }
      currentInput = value.toString();
      updateDisplay();
      shouldResetInput = true;
    }

    function clearAll() {
      currentInput = '0';
      operator = null;
      operand1 = null;
      operand2 = null;
      result = null;
      lastOperator = null;
      lastOperand = null;
      shouldResetInput = false;
      updateDisplay();
    }

    function clearEntry() {
      currentInput = '0';
      updateDisplay();
    }

    function backspace() {
      if (currentInput.length > 1) {
        currentInput = currentInput.slice(0, -1);
      } else {
        currentInput = '0';
      }
      updateDisplay();
    }

    // Event listeners for number buttons
    document.querySelectorAll('.number-button').forEach(button => {
      button.addEventListener('click', () => {
        handleNumber(button.textContent as string);
      });
    });

    // Event listeners for operator buttons
    document.getElementById('add')?.addEventListener('click', () => handleOperator('+'));
    document.getElementById('subtract')?.addEventListener('click', () => handleOperator('-'));
    document.getElementById('multiply')?.addEventListener('click', () => handleOperator('×'));
    document.getElementById('divide')?.addEventListener('click', () => handleOperator('÷'));

    // Event listener for percent button
    document.getElementById('percent')?.addEventListener('click', () => handlePercent());

    // Event listeners for special operation buttons
    document.getElementById('reciprocal')?.addEventListener('click', () => handleSpecialOperation('1/x'));
    document.getElementById('square')?.addEventListener('click', () => handleSpecialOperation('x²'));
    document.getElementById('sqrt')?.addEventListener('click', () => handleSpecialOperation('√x'));
    document.getElementById('plus-minus')?.addEventListener('click', () => handleSpecialOperation('±'));

    // Event listener for decimal point
    document.getElementById('decimal')?.addEventListener('click', () => {
      if (!currentInput.includes('.')) {
        currentInput += '.';
        updateDisplay();
      }
    });

    // Event listeners for clear and backspace buttons
    document.getElementById('ce')?.addEventListener('click', () => clearEntry());
    document.getElementById('c')?.addEventListener('click', () => clearAll());
    document.getElementById('backspace')?.addEventListener('click', () => backspace());

    // Event listener for equals button
    document.getElementById('equals')?.addEventListener('click', () => {
      if (operator !== null) {
        operand2 = parseFloat(currentInput);
        performCalculation();
      } else if (lastOperator && lastOperand !== null) {
        operator = lastOperator;
        operand2 = lastOperand;
        performCalculation();
      }
    });

    // Function to fetch and display statistics
    function fetchStatistics() {
      fetch(`${backendUrl}/getNumbers`)
        .then(response => response.json())
        .then(data => {
          const statsBody = document.getElementById('stats-body');
          if (statsBody) {
            statsBody.innerHTML = '';
            for (const [button, count] of Object.entries(data)) {
              const row = document.createElement('tr');
              const buttonCell = document.createElement('td');
              const countCell = document.createElement('td');

              buttonCell.textContent = button;
              countCell.textContent = (count as number).toString();

              row.appendChild(buttonCell);
              row.appendChild(countCell);
              statsBody.appendChild(row);
            }
          }
        })
        .catch(error => console.error('Error fetching statistics:', error));
    }

    // Fetch statistics when the page loads
    window.addEventListener('load', () => {
      fetchStatistics();
    });
  </script>
</Layout>