--- 
import Layout from "../layouts/layout.astro";
---

<Layout>
		<div class="container">
		  <div class="calculator">
			<div class="display" id="display">0</div>
			<div class="buttons">
			  <button class="button clear-button">C</button>
			  <button class="button operator-button">÷</button>
			  <button class="button operator-button">×</button>
			  <button class="button operator-button">−</button>
			  <button class="button number-button">7</button>
			  <button class="button number-button">8</button>
			  <button class="button number-button">9</button>
			  <button class="button operator-button">+</button>
			  <button class="button number-button">4</button>
			  <button class="button number-button">5</button>
			  <button class="button number-button">6</button>
			  <button class="button calculate-button">=</button>
			  <button class="button number-button">1</button>
			  <button class="button number-button">2</button>
			  <button class="button number-button">3</button>
			  <button class="button zero number-button">0</button>
			  <button class="button dot-button">.</button>
			</div>
		  </div>
		  <div class="table-container">
			<table>
			  <thead>
				<tr>
				  <th>Key</th>
				  <th>Press Count</th>
				</tr>
			  </thead>
			  <tbody id="key-press-table">
				<!-- Data will be populated here -->
			  </tbody>
			</table>
		  </div>
		</div>
		
</Layout>

<script>
	const backendUrl = import.meta.env.PUBLIC_EXPRESS_BACKEND_URL;
	console.log(backendUrl);
	const display = document.getElementById('display');
	let currentInput = '0';
	let operator: string | null = null;
	let previousInput: string | null = null;

	document.querySelectorAll('.number-button').forEach(button => {
		button.addEventListener('click', () => {
			appendNumber(parseInt(button.textContent as string));
		});
	});

	document.querySelectorAll('.clear-button').forEach(button => {
		button.addEventListener('click', () => {
			clearDisplay();
		});
	});

	document.querySelectorAll('.operator-button').forEach(button => {
		button.addEventListener('click', () => {
			appendOperator(button.textContent as string);
		});
	});

	document.querySelectorAll('.calculate-button').forEach(button => {
		button.addEventListener('click', () => {
			calculate();
		});
	});

	const dotButton = document.querySelector('.dot-button');
	if (dotButton) {
		dotButton.addEventListener('click', appendDot);
	}

	function clearDisplay() {
	  currentInput = '0';
	  operator = null;
	  previousInput = null;
	  updateDisplay();
	}

	function appendNumber(number: number) {
	  if (currentInput === '0') {
		currentInput = number.toString();
	  } else {
		currentInput += number.toString();
	  }
	  updateDisplay();
	  recordButtonPress(number);
	}

	function appendOperator(op: string) {
	  if (operator !== null) {
		calculate();
	  }
	  operator = op;
	  previousInput = currentInput;
	  currentInput = '0';
	}

	function appendDot() {
	  if (!currentInput.includes('.')) {
		currentInput += '.';
	  }
	  updateDisplay();
	}

	function calculate() {
	  if (operator === null || previousInput === null) {
		return;
	  }
	  const prev = parseFloat(previousInput);
	  const current = parseFloat(currentInput);
	  let result;
	  switch (operator) {
		case '+':
		  result = prev + current;
		  break;
		case '-':
		  result = prev - current;
		  break;
		case '*':
		  result = prev * current;
		  break;
		case '/':
		  result = prev / current;
		  break;
		default:
		  return;
	  }
	  currentInput = result.toString();
	  operator = null;
	  previousInput = null;
	  updateDisplay();
	}

	function updateDisplay() {
	  if (display) {
		display.textContent = currentInput;
	  }
	}

	function recordButtonPress(button: number) {
	  if (!isNaN(button)) {
		fetch(`${backendUrl}/numberPressed/${button}`)
		  .then(response => response.text())
		  .then(data => {
			console.log(data);
			fetchKeyPressData(); // Refresh the table data
		  })
		  .catch(error => console.error('Error:', error));
	  }
	}

	function fetchKeyPressData() {
	  fetch(`${backendUrl}/getNumbers`)
		.then(response => response.json())
		.then(data => {
		  const tableBody = document.getElementById('key-press-table');
		  if (tableBody) {
			tableBody.innerHTML = '';
			for (const [key, count] of Object.entries(data)) {
			  const row = document.createElement('tr');
			  const keyCell = document.createElement('td');
			  keyCell.textContent = key;
			  const countCell = document.createElement('td');
			  countCell.textContent = count as string;
			  row.appendChild(keyCell);
			  row.appendChild(countCell);
			  tableBody.appendChild(row);
			}
		  }
		})
		.catch(error => console.error('Error:', error));
	}

	document.addEventListener('DOMContentLoaded', fetchKeyPressData);
</script>

<style>
  .container {
	padding-top: 10rem;
    display: flex;
    flex-direction: row;
    align-items: center;
	justify-content: center;
    gap: 3rem;
  }
  .calculator, .table-container {
    width: 90vw;
    max-width: 320px;
    height: 90vh;
    max-height: 520px;
    background-color: #000;
    border-radius: 20px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }
  .display {
    width: 100%;
    height: 20%;
    background-color: #333;
    color: #fff;
    font-size: 2.5rem;
    text-align: right;
    padding: 20px;
    box-sizing: border-box;
    border-radius: 10px;
    margin-bottom: 20px;
    flex-shrink: 0;
  }
  .buttons {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    flex-grow: 1;
  }
  .button {
    width: 100%;
    height: 100%;
    background-color: #666;
    color: #fff;
    font-size: 1.5rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    outline: none;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .button.calculate-button {
    background-color: #f90; /* Style the equals button with the same color as the operator buttons */
  }
  .button.zero {
    grid-column: span 2;
  }
  .table-container {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    padding: 20px;
    box-sizing: border-box;
    overflow-y: auto;
  }
  table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  th {
    background-color: #f4f4f4;
  }
</style>